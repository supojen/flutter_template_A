// Mocks generated by Mockito 5.4.2 from annotations
// in mobile/test/product/data/repositories/spu_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mobile/infrastructure/network/network_info.dart' as _i6;
import 'package:mobile/product/data/datasources/spu_local_datasource.dart'
    as _i5;
import 'package:mobile/product/data/datasources/spu_remote_datasource.dart'
    as _i3;
import 'package:mobile/product/data/models/spu_model.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSPUModel_0 extends _i1.SmartFake implements _i2.SPUModel {
  _FakeSPUModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SPURemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockSPURemoteDataSource extends _i1.Mock
    implements _i3.SPURemoteDataSource {
  MockSPURemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.SPUModel>> getRandomSPUs() => (super.noSuchMethod(
        Invocation.method(
          #getRandomSPUs,
          [],
        ),
        returnValue: _i4.Future<List<_i2.SPUModel>>.value(<_i2.SPUModel>[]),
      ) as _i4.Future<List<_i2.SPUModel>>);
  @override
  _i4.Future<_i2.SPUModel> getSPU(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getSPU,
          [id],
        ),
        returnValue: _i4.Future<_i2.SPUModel>.value(_FakeSPUModel_0(
          this,
          Invocation.method(
            #getSPU,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.SPUModel>);
}

/// A class which mocks [SPULocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockSPULocalDataSource extends _i1.Mock
    implements _i5.SPULocalDataSource {
  MockSPULocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.SPUModel> getLastSPU(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getLastSPU,
          [id],
        ),
        returnValue: _i4.Future<_i2.SPUModel>.value(_FakeSPUModel_0(
          this,
          Invocation.method(
            #getLastSPU,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.SPUModel>);
  @override
  _i4.Future<void> cacheSPU(_i2.SPUModel? model) => (super.noSuchMethod(
        Invocation.method(
          #cacheSPU,
          [model],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i6.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
